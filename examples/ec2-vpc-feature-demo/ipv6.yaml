tosca_definitions_version: cloudify_dsl_1_4

imports:
  - http://cloudify.co/spec/cloudify/6.4.0/types.yaml
  - plugin:cloudify-aws-plugin

inputs:

  aws_access_key_id:
    description: YOUR AWS ACCESS KEY ID
    default: { get_secret: aws_access_key_id }

  aws_secret_access_key:
    description: YOUR AWS SECRET ACCESS KEY
    default: { get_secret: aws_secret_access_key }

  aws_region_name:
    default: us-east-1

  ec2_region_endpoint:
    default: { concat: [ 'ec2', { get_input: aws_region_name }, '.amazonaws.com' ] }

  availability_zone:
    default: { concat: [ { get_input: aws_region_name }, 'b' ] }

  vpc_cidr:
    default: 10.10.0.0/16

  public_subnet_cidr:
    default: 10.10.0.0/24

  private_subnet_cidr:
    default: 10.10.1.0/24

  ebs_volume_attachment_device:
    default: /dev/sdh

  ami_owner_filter:
    display_label: Ami Owner Filter
    type: string
    description: The AWS AMI owner number.
    default: '263721492972'

  ami_name_filter:
    display_label: Ami Name Filter
    type: string
    description: The name of the AWS AMI in the AWS region.
    default: 'CentOS7-cloudify-examples-image'

dsl_definitions:

  client_config: &client_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    aws_session_token: { get_secret: aws_session_token }
    region_name: { get_input: aws_region_name }

node_templates:

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      resource_config:
        CidrBlock: { get_input: vpc_cidr }
        kwargs:
          AmazonProvidedIpv6CidrBlock: true
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MyVPC
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.resources.vpc.create
          inputs:
            modify_vpc_attribute_args:
              EnableDnsHostnames:
                Value: true

  public_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        CidrBlock: ''
        AvailabilityZone: { get_input: availability_zone }
        kwargs:
          Ipv6Native: true
          Ipv6CidrBlock: { get_attribute: [ vpc, create_response, Ipv6CidrBlockAssociationSet, 0, Ipv6CidrBlock ] }
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MySubnet1
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.resources.subnet.create
          inputs:
            modify_subnet_attribute_args:
              AssignIpv6AddressOnCreation:
                Value: true

  private_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        CidrBlock: { get_input: private_subnet_cidr }
        AvailabilityZone: { get_input: availability_zone }
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MySubnet2
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  public_subnet_routetable:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MyRouteTable1
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.relationships.connected_to
        target: public_subnet

  private_subnet_routetable:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MyRouteTable2
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.relationships.connected_to
        target: private_subnet

  security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      resource_config:
        GroupName: AWSSDKExample
        Description: Created by aws-instances-example blueprint.yaml.
        VpcId: { get_attribute: [ vpc, aws_resource_id] }
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MyGroup
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            resource_config: { get_property: [ SELF, resource_config, kwargs] }

  security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *client_config
      resource_config:
       IpPermissions:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          IpRanges:
            - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            IpRanges:
              - CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              IpRanges:
                - CidrIp: 0.0.0.0/0
              - IpProtocol: tcp
                FromPort: 443
                ToPort: 443
                IpRanges:
                    - CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                    FromPort: 5671
                    ToPort: 5672
                    IpRanges:
                        - CidrIp: 0.0.0.0/0
                    - IpProtocol: tcp
                        FromPort: 8101
                        ToPort: 8101
                        IpRanges:
                              - CidrIp: 0.0.0.0/0
                        - IpProtocol: tcp
                              FromPort: 53333
                              ToPort: 53333
                              IpRanges:
                                    - CidrIp: 0.0.0.0/0
                              - IpProtocol: tcp
                                    FromPort: 8300
                                    ToPort: 8300
                                    IpRanges:
                                            - CidrIp: 0.0.0.0/0
                                    - IpProtocol: tcp
                                            FromPort: 8301
                                            ToPort: 8301
                                            IpRanges:
                                                      - CidrIp: 0.0.0.0/0
                                            - IpProtocol: tcp
                                                      FromPort: 8500
                                                      ToPort: 8500
                                                      IpRanges:
                                                                  - CidrIp: 0.0.0.0/0
                                                      - IpProtocol: tcp
                                                                  FromPort: 22000
                                                                  ToPort: 22000
                                                                  IpRanges:
                                                                                  - CidrIp: 0.0.0.0/0
                                                                  - IpProtocol: tcp
                                                                                  FromPort: 15432
                                                                                  ToPort: 15432
                                                                                  IpRanges:
                                                                                                      - CidrIp: 0.0.0.0/0
    relationships:
      - type: cloudify.relationships.contained_in
        target: security_group
