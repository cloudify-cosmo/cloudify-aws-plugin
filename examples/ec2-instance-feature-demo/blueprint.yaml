tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.5/types.yaml
  - plugin:cloudify-aws-plugin

inputs:

  aws_access_key_id:
    description: YOUR AWS ACCESS KEY ID
    default: { get_secret: aws_access_key_id }

  aws_secret_access_key:
    description: YOUR AWS SECRET ACCESS KEY
    default: { get_secret: aws_secret_access_key }

  ec2_region_name:
    default: { get_secret: ec2_region_name }

  ec2_region_endpoint:
    default: { get_secret: ec2_region_endpoint }

  availability_zone:
    default: { get_secret: availability_zone }

  vpc_cidr:
    default: 10.10.0.0/16

  public_subnet_cidr:
    default: 10.10.0.0/24

  private_subnet_cidr:
    default: 10.10.1.0/24

  ebs_volume_attachment_device:
    default: /dev/sdh

dsl_definitions:

  client_config: &client_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    region_name: { get_input: ec2_region_name }

node_templates:

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      resource_config:
        kwargs:
          CidrBlock: { get_input: vpc_cidr }
          AmazonProvidedIpv6CidrBlock: True
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MyVPC
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: aws.cloudify_aws.ec2.resources.vpc.create
          inputs:
            modify_vpc_attribute_args:
              EnableDnsHostnames:
                Value: True

  internet_gateway:
    type: cloudify.nodes.aws.ec2.InternetGateway
    properties:
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.connected_to
        target: vpc

  public_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        kwargs:
          CidrBlock: { get_input: public_subnet_cidr }
          AvailabilityZone: { get_input: availability_zone }
          Ipv6CidrBlock: { get_attribute: [ vpc, create_response, Ipv6CidrBlockAssociationSet, 0, Ipv6CidrBlock ] }
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MySubnet1
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc
      - type: cloudify.relationships.depends_on
        target: internet_gateway
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: aws.cloudify_aws.ec2.resources.subnet.create
          inputs:
            modify_subnet_attribute_args:
              AssignIpv6AddressOnCreation:
                Value: True

  private_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        kwargs:
          CidrBlock: { get_input: private_subnet_cidr }
          AvailabilityZone: { get_input: availability_zone }
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MySubnet2
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc
      - type: cloudify.relationships.depends_on
        target: internet_gateway

  public_subnet_routetable:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MyRouteTable1
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.relationships.connected_to
        target: public_subnet

  private_subnet_routetable:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MyRouteTable2
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.relationships.connected_to
        target: private_subnet

  route_public_subnet_internet_gateway:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_subnet_routetable
      - type: cloudify.relationships.connected_to
        target: internet_gateway
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

  nat_gateway_ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      resource_config:
        kwargs:
          Domain: 'vpc'
      client_config: *client_config
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

  nat_gateway:
    type: cloudify.nodes.aws.ec2.NATGateway
    properties:
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MyNAT
    relationships:
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.relationships.depends_on
        target: nat_gateway_ip

  route_private_subnet_nat_gateway:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_subnet_routetable
      - type: cloudify.relationships.connected_to
        target: nat_gateway
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

  security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      resource_config:
        kwargs:
          GroupName: AWSSDKExample
          Description: Created by aws-instances-example blueprint.yaml.
          VpcId: { get_attribute: [ vpc, aws_resource_id] }
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MyGroup
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            resource_config: { get_property: [ SELF, resource_config, kwargs] }

  security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
     client_config: *client_config
     resource_config:
      kwargs:
        IpPermissions:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          IpRanges:
          - CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          IpRanges:
          - CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          IpRanges:
          - CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          IpRanges:
          - CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5671
          ToPort: 5672
          IpRanges:
          - CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8101
          ToPort: 8101
          IpRanges:
          - CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 53333
          ToPort: 53333
          IpRanges:
          - CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8300
          ToPort: 8300
          IpRanges:
          - CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8301
          ToPort: 8301
          IpRanges:
          - CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8500
          ToPort: 8500
          IpRanges:
          - CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22000
          ToPort: 22000
          IpRanges:
          - CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 15432
          ToPort: 15432
          IpRanges:
          - CidrIp: 0.0.0.0/0
    relationships:
      - type: cloudify.relationships.contained_in
        target: security_group

  nic:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Description: Created by aws-instances-example blueprint.yaml.
          SubnetId: { get_attribute: [ public_subnet, aws_resource_id] }
          Groups:
            - { get_attribute: [ security_group, aws_resource_id ] }
      Tags:
        - Key: Name
          Value: MyNIC
    relationships:
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.relationships.depends_on
        target: security_group
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            resource_config: { get_property: [ SELF, resource_config, kwargs] }
            modify_network_interface_attribute_args:
              SourceDestCheck:
                Value: false

  ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      resource_config:
        kwargs:
          Domain: 'vpc'
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: nic

  cloudify_manager_ami:
    type: cloudify.nodes.aws.ec2.Image
    properties:
      resource_config:
        kwargs:
          Filters:
            - Name: image-id
              Values:
                - ami-0120b2cc79038bf90
      client_config: *client_config

  cloudify_manager:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      agent_config:
        install_method: none
      use_ipv6_ip: True
      resource_config:
        ImageId: { get_attribute: [ cloudify_manager_ami, aws_resource_id ] }
        InstanceType: t2.large
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MyVM
    relationships:
      - type: cloudify.relationships.depends_on
        target: nic
      - type: cloudify.relationships.depends_on
        target: ip
      - type: cloudify.relationships.depends_on
        target: cloudify_manager_ami
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            resource_config:
              MaxCount: 1
              MinCount: 1
              ImageId: { get_attribute: [ cloudify_manager_ami, aws_resource_id ] }
              InstanceType: t2.large
            modify_instance_attribute_args:
              SourceDestCheck:
                Value: false

  ebs_volume:
    type: cloudify.nodes.aws.ec2.EBSVolume
    properties:
      resource_config:
        kwargs:
          AvailabilityZone: { get_input: availability_zone }
          Size: 6
          TagSpecifications:
            - ResourceType: volume
              Tags:
                - Key: First
                  Value: First Volume
                - Key: Second
                  Value: Second Volume
      client_config: *client_config

  ebs_volume_attachment:
    type: cloudify.nodes.aws.ec2.EBSAttachment
    properties:
      resource_config:
        kwargs:
          Device: { get_input: ebs_volume_attachment_device }
          InstanceId: { get_attribute: [ cloudify_manager, aws_resource_id ] }
          VolumeId: { get_attribute: [ ebs_volume, aws_resource_id ] }
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: ebs_volume
      - type: cloudify.relationships.depends_on
        target: cloudify_manager