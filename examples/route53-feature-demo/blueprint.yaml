tosca_definitions_version: cloudify_dsl_1_4

imports:
  - http://cloudify.co/spec/cloudify/6.4.0/types.yaml
  - plugin:cloudify-aws-plugin

inputs:

  aws_access_key_id:
    type: string
    default: { get_secret: aws_access_key_id }

  aws_secret_access_key:
    type: string
    default: { get_secret: aws_secret_access_key }

  aws_region_name:
    type: string
    default: { get_secret: aws_region_name }

  availability_zone:
    type: string
    default: { concat: [ { get_input: aws_region_name}, 'b' ] }

  public_subnet_cidr:
    default: '10.0.0.0/24'

  vpc_cidr:
    default: '10.0.0.0/16'

dsl_definitions:

  client_config: &client_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    region_name: { get_input: aws_region_name }

node_templates:

  dns_record_set_2:
    type: cloudify.nodes.aws.route53.RecordSet
    properties:
      client_config: *client_config
      resource_config:
        kwargs: {}
    relationships:
    - type: cloudify.relationships.aws.route53.record_set.connected_to
      target: dns_hosted_zone
    - type: cloudify.relationships.depends_on
      target: instance
    interfaces:
      cloudify.interfaces.lifecycle:
        precreate:
          implementation: aws.cloudify_aws.route53.resources.record_set.prepare
          inputs:
            resource_config:
              Action: CREATE
              ResourceRecordSet:
                Name: { concat: ["dev.", { get_property: [dns_hosted_zone, resource_id] }] }
                Type: !!str TXT
                TTL: !!int 60
                ResourceRecords:
                - Value: { concat: [ '"', { get_attribute: [ instance, ip ] } , '"' ] }

  dns_record_set_1:
    type: cloudify.nodes.aws.route53.RecordSet
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Action: UPSERT
          ResourceRecordSet:
            Name: { concat: ["staging.", { get_property: [dns_hosted_zone, resource_id] }] }
            Type: !!str TXT
            TTL: !!int 60
            ResourceRecords:
            - Value: '"Created using Cloudify"'
    relationships:
    - type: cloudify.relationships.aws.route53.record_set.connected_to
      target: dns_hosted_zone

  dns_hosted_zone:
    type: cloudify.nodes.aws.route53.HostedZone
    properties:
      resource_id: !!str getcloudify.org
      client_config: *client_config
      resource_config:
        kwargs:
          HostedZoneConfig:
            Comment: !!str Cloudify-generated DNS Hosted Zone
            PrivateZone: !!bool true
          VPC:
            VPCRegion: { get_input: aws_region_name }
            VPCId: { get_attribute: [ dns_vpc, aws_resource_id ] }
    relationships:
    - type: cloudify.relationships.aws.route53.hosted_zone.connected_to
      target: dns_vpc


  instance:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      agent_config:
        install_method: none
      resource_config:
        MaxCount: 1
        MinCount: 1
        ImageId: { get_attribute: [ ubuntu_trusty_ami, aws_resource_id ] }
        InstanceType: t2.micro
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: dns_subnet
    - type: cloudify.relationships.depends_on
      target: ubuntu_trusty_ami

  ubuntu_trusty_ami:
    type: cloudify.nodes.aws.ec2.Image
    properties:
      resource_config:
        kwargs:
          Filters:
          - Name: name
            Values:
            - 'ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20210416'
          - Name: owner-id
            Values:
            - '099720109477'
      client_config: *client_config

  dns_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        CidrBlock: { get_input: public_subnet_cidr }
        AvailabilityZone: { get_input: availability_zone }
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: dns_vpc

  dns_vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      resource_config:
        CidrBlock: { get_input: vpc_cidr }
      client_config: *client_config
