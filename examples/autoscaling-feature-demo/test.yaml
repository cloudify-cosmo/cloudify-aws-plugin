tosca_definitions_version: cloudify_dsl_1_4

imports:
  - http://cloudify.co/spec/cloudify/6.4.0/types.yaml
  - plugin:cloudify-aws-plugin

inputs:

  aws_access_key_id:
    type: string
    default: { get_secret: aws_access_key_id }

  aws_secret_access_key:
    type: string
    default: { get_secret: aws_secret_access_key }

  aws_region_name:
    type: string
    default: { get_secret: ec2_region_name }

  availability_zone:
    type: string
    default: { concat: [ { get_input: aws_region_name}, 'c' ] }

  public_subnet_cidr:
    default: '10.0.0.0/24'

  vpc_cidr:
    default: '10.0.0.0/16'

dsl_definitions:

  client_config: &client_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    region_name: { get_input: aws_region_name }

node_templates:

  autoscaling_lifecycle_hook:
    type: cloudify.nodes.aws.autoscaling.LifecycleHook
    properties:
      resource_config:
        LifecycleHookName: test-autoscaling
        LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: autoscaling_group

  autoscaling_group:
    type: cloudify.nodes.aws.autoscaling.Group
    properties:
      resource_config:
        AutoScalingGroupName: test-autoscaling
        MinSize: 1
        MaxSize: 2
        kwargs:
          DefaultCooldown: 300
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: launch_configuration
    - type: cloudify.relationships.depends_on
      target: subnet

  launch_configuration:
    type: cloudify.nodes.aws.autoscaling.LaunchConfiguration
    properties:
      resource_config:
        LaunchConfigurationName: test-lauchconfig3
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: instance

  instance:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      agent_config:
        install_method: none
      resource_config:
        MaxCount: 1
        MinCount: 1
        ImageId: { get_attribute: [ ubuntu_trusty_ami, aws_resource_id ] }
        InstanceType: t2.large
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: subnet
    - type: cloudify.relationships.depends_on
      target: ubuntu_trusty_ami

  ubuntu_trusty_ami:
    type: cloudify.nodes.aws.ec2.Image
    properties:
      resource_config:
        kwargs:
          Filters:
          - Name: name
            Values:
            - 'ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-20170727'
          - Name: owner-id
            Values:
            - '099720109477'
      client_config: *client_config

  subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        CidrBlock: { get_input: public_subnet_cidr }
        AvailabilityZone: { get_input: availability_zone }
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      resource_config:
        CidrBlock: { get_input: vpc_cidr }
      client_config: *client_config
