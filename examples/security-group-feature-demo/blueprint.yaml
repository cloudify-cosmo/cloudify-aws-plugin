tosca_definitions_version: cloudify_dsl_1_4

imports:
  - http://cloudify.co/spec/cloudify/6.4.0/types.yaml
  - plugin:cloudify-aws-plugin

inputs:

  aws_access_key_id:
    display_label: Aws Access Key Id
    type: string
    default: { get_secret: aws_access_key_id }

  aws_secret_access_key:
    display_label: Aws Secret Access Key
    type: string
    default: { get_secret: aws_secret_access_key }

  aws_region_name:
    display_label: Aws Region Name
    type: string
    default: { get_secret: ec2_region_name }

  vpc:
    display_label: Vpc
    type: string

dsl_definitions:

  client_config: &client_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    region_name: { get_input: aws_region_name }

node_templates:

  security_group0:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      resource_config:
        Description: Example.
        GroupName: security_group0
        kwargs:
          VpcId: { get_input: vpc }
      client_config: *client_config

  security_group1:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      resource_config:
        Description: Example.
        GroupName: security_group1
        kwargs:
          VpcId: { get_input: vpc }
      client_config: *client_config

  security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          IpPermissions:
            - IpProtocol: icmp
              FromPort: -1
              ToPort: -1
              IpRanges:
                - CidrIp: 0.0.0.0/0
                UserIdGroupPairs: [ { GroupId: { get_attribute: [ security_group1, aws_resource_id ] } } ]
    relationships:
      - type: cloudify.relationships.contained_in
        target: security_group0
      - type: cloudify.relationships.depends_on
        target: security_group1
