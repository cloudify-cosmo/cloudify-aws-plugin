tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.5/types.yaml
  - plugin:cloudify-aws-plugin

inputs:

  aws_access_key_id:
    type: string
    default: { get_secret: aws_access_key_id }

  aws_secret_access_key:
    type: string
    default: { get_secret: aws_secret_access_key }

  aws_region_name:
    type: string
    default: { get_secret: ec2_region_name }

  aws_vpc_id:
    description: |
      AWS VPC ID
    type: string

  aws_security_group_id:
    description: |
      AWS VPC Security Group ID
    type: string

  aws_vpc_subnet_1_id:
    description: |
      AWS VPC Subnet ID
    type: string

  aws_vpc_subnet_2_id:
    description: |
      AWS VPC Subnet ID
    type: string

  aws_vpc_subnet_3_id:
    description: |
      AWS VPC Subnet ID
    type: string

dsl_definitions:

  client_config: &client_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    region_name: { get_input: aws_region_name }

node_templates:

  forward_rule:
    type: cloudify.nodes.aws.elb.Rule
    properties:
      resource_config:
        kwargs:
          Priority: 101
          Conditions:
            - Field: 'host-header'
              Values:
                - example.com
          Actions:
            - Type: forward
              TargetGroupArn: { get_attribute: [ forward_target_group, aws_resource_arn ] }
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc
      - type: cloudify.relationships.depends_on
        target: http_listener
      - type: cloudify.relationships.depends_on
        target: forward_target_group

  forward_target_group:
    type: cloudify.nodes.aws.elb.TargetGroup
    properties:
      resource_config:
        kwargs:
          Name: test-elb-target-group
          Protocol: HTTP
          Port: 8080
          HealthCheckProtocol: HTTP
          HealthCheckPort: '80'
          HealthCheckIntervalSeconds: 30
          HealthCheckTimeoutSeconds: 5
          UnhealthyThresholdCount: 3
          Matcher:
            HttpCode: '404'
          Attributes:
            - Key: stickiness.enabled
              Value: 'true'
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc


  http_listener:
    type: cloudify.nodes.aws.elb.Listener
    properties:
      resource_config:
        kwargs:
          Protocol: HTTP
          Port: 8080
          # SslPolicy: SSLNegotiationPolicyType
          DefaultActions:
            - Type: forward
              TargetGroupArn: { get_attribute: [ forward_target_group, aws_resource_arn ] }
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: elb
      - type: cloudify.relationships.depends_on
        target: forward_target_group

  elb:
    type: cloudify.nodes.aws.elb.LoadBalancer
    properties:
      resource_config:
        kwargs:
          Name: test-elb
          Attributes:
            - Key: idle_timeout.timeout_seconds
              Value: '120'
            # Untested
            # - Key: access_logs.s3.enabled
            #   Value: true
            # - Key: access_logs.s3.bucket
            #   Value: bucket-name
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: subnet1
      - type: cloudify.relationships.depends_on
        target: subnet2
#      - type: cloudify.relationships.depends_on
#        target: subnet3
      - type: cloudify.relationships.depends_on
        target: security_group

  security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      use_external_resource: true
      resource_id: { get_input: aws_security_group_id }
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  subnet1:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      use_external_resource: true
      resource_id: { get_input: aws_vpc_subnet_1_id }
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  subnet2:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      use_external_resource: true
      resource_id: { get_input: aws_vpc_subnet_2_id }
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  subnet3:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      use_external_resource: true
      resource_id: { get_input: aws_vpc_subnet_3_id }
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      use_external_resource: true
      resource_id: { get_input: aws_vpc_id }
      client_config: *client_config
