tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.5/types.yaml
  - plugin:cloudify-aws-plugin

inputs:

  aws_access_key_id:
    type: string
    default: { get_secret: aws_access_key_id }

  aws_secret_access_key:
    type: string
    default: { get_secret: aws_secret_access_key }

  aws_region_name:
    type: string
    default: { get_secret: ec2_region_name }

dsl_definitions:

  client_config: &client_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    region_name: { get_input: aws_region_name }

node_templates:

  ubuntu_trusty_ami:
    type: cloudify.nodes.aws.ec2.Image
    properties:
      resource_config:
        kwargs:
          Filters:
          - Name: name
            Values:
            - 'ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-20170727'
          - Name: owner-id
            Values:
            - '099720109477'
      client_config: *client_config

  instance3:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      agent_config:
        install_method: none
      resource_config:
        MaxCount: 1
        MinCount: 1
        ImageId: { get_attribute: [ ubuntu_trusty_ami, aws_resource_id ] }
        InstanceType: m3.large
      client_config: *client_config
      Tags:
        - Key: Name
          Value: Instance3
    relationships:
      - type: cloudify.relationships.depends_on
        target: ubuntu_trusty_ami
      - type: cloudify.relationships.depends_on
        target: subnet3
      - type: cloudify.relationships.aws.elb.instance.connected_to
        target: classic_elb

  instance2:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      agent_config:
        install_method: none
      resource_config:
        MaxCount: 1
        MinCount: 1
        ImageId: { get_attribute: [ ubuntu_trusty_ami, aws_resource_id ] }
        InstanceType: m3.large
      client_config: *client_config
      Tags:
        - Key: Name
          Value: Instance2
    relationships:
      - type: cloudify.relationships.depends_on
        target: ubuntu_trusty_ami
      - type: cloudify.relationships.depends_on
        target: subnet2
      - type: cloudify.relationships.aws.elb.instance.connected_to
        target: classic_elb

  instance1:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      agent_config:
        install_method: none
      resource_config:
        MaxCount: 1
        MinCount: 1
        ImageId: { get_attribute: [ ubuntu_trusty_ami, aws_resource_id ] }
        InstanceType: m3.large
      client_config: *client_config
      Tags:
        - Key: Name
          Value: Instance1
    relationships:
      - type: cloudify.relationships.depends_on
        target: ubuntu_trusty_ami
      - type: cloudify.relationships.depends_on
        target: subnet1
      - type: cloudify.relationships.aws.elb.instance.connected_to
        target: classic_elb

  classic_stickiness_policy:
    type: cloudify.nodes.aws.elb.Classic.Policy.Stickiness
    properties:
      resource_config:
        kwargs:
          PolicyName: myclassicstickinesspolicy
          CookieExpirationPeriod: 3600
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: classic_elb
      - type: cloudify.relationships.depends_on
        target: classic_elb_listener

  classic_policy:
    type: cloudify.nodes.aws.elb.Classic.Policy
    properties:
      resource_config:
        kwargs:
          PolicyName: myclassicpolicy
          PolicyTypeName: ProxyProtocolPolicyType
          PolicyAttributes:
            - AttributeName: ProxyProtocol
              AttributeValue: 'true'
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: classic_elb

  classic_health_check:
    type: cloudify.nodes.aws.elb.Classic.HealthCheck
    properties:
      resource_config:
        kwargs:
          HealthCheck:
            Target: HTTP:80/
            Interval: 15
            Timeout: 5
            UnhealthyThreshold: 2
            HealthyThreshold: 5
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: classic_elb

  classic_elb_listener:
    type: cloudify.nodes.aws.elb.Classic.Listener
    properties:
      resource_config:
        kwargs:
          Listeners:
          - Protocol: HTTP
            LoadBalancerPort: 80
            InstancePort: 8080
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: classic_elb

  classic_elb:
    type: cloudify.nodes.aws.elb.Classic.LoadBalancer
    properties:
      resource_config:
        kwargs:
          LoadBalancerName: myclassicelb
          Listeners: { get_property: [ classic_elb_listener, resource_config, kwargs, Listeners ] }
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: subnet1
      - type: cloudify.relationships.depends_on
        target: subnet2
      - type: cloudify.relationships.depends_on
        target: subnet3
      - type: cloudify.relationships.depends_on
        target: security_group
      - type: cloudify.relationships.depends_on
        target: igw
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: aws.cloudify_aws.elb.resources.classic.load_balancer.start
          inputs:
            resource_config:
              LoadBalancerAttributes:
                CrossZoneLoadBalancing:
                  Enabled: true
                ConnectionSettings:
                  IdleTimeout: 120

  security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      resource_config:
        kwargs:
          GroupName: SecurityGroup1
          Description: Example Security Group 1
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MyGroup
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  subnet1:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        kwargs:
          CidrBlock: '10.0.1.0/24'
          AvailabilityZone: { concat: [ { get_input: aws_region_name }, 'b' ] }
      client_config: *client_config
      Tags:
      - Key: Name
        Value: MySubnet1
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  subnet2:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        kwargs:
          CidrBlock: '10.0.2.0/24'
          AvailabilityZone: { concat: [ { get_input: aws_region_name }, 'c' ] }
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MySubnet2
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  subnet3:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        kwargs:
          CidrBlock: '10.0.3.0/24'
          AvailabilityZone: { concat: [ { get_input: aws_region_name }, 'd' ] }
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MySubnet3
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  igw:
    type: cloudify.nodes.aws.ec2.InternetGateway
    properties:
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MyIGW
    relationships:
      - type: cloudify.relationships.connected_to
        target: vpc
      - type: cloudify.relationships.depends_on
        target: security_group

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      resource_config:
        kwargs:
          CidrBlock: '10.0.0.0/16'
      client_config: *client_config
      Tags:
        - Key: Name
          Value: MyVPC
