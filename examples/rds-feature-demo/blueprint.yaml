tosca_definitions_version: cloudify_dsl_1_4

imports:
  - http://cloudify.co/spec/cloudify/6.4.0/types.yaml
  - plugin:cloudify-aws-plugin

inputs:

  aws_region_name:
    type: string
    default: us-east-2

  env_name:
    type: string
    default: 'a'

dsl_definitions:
  client_config: &client_config
    aws_access_key_id: { get_secret: aws_access_key_id }
    aws_secret_access_key: { get_secret: aws_secret_access_key }
    region_name: { get_input: aws_region_name }

node_templates:

  rds_mysql_read_replica:
    type: cloudify.nodes.aws.rds.InstanceReadReplica
    properties:
      resource_id: { concat: [ devdbinstance-replica, { get_input: env_name } ] }
      resource_config:
        kwargs:
          SourceDBInstanceIdentifier: { get_property: [rds_mysql_instance, resource_id] }
          DBInstanceClass: db.t2.small
          AvailabilityZone: us-east-2b
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.aws.rds.instance_read_replica.connected_to
      target: rds_mysql_instance
    - type: cloudify.relationships.aws.rds.instance_read_replica.connected_to
      target: rds_option_group
    - type: cloudify.relationships.aws.rds.instance_read_replica.connected_to
      target: rds_parameter_group

  rds_mysql_instance:
    type: cloudify.nodes.aws.rds.Instance
    properties:
      resource_id: { concat: [ devdbinstance, { get_input: env_name } ] }
      client_config: *client_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            resource_config:
              DBInstanceClass: db.t2.small
              Engine: mysql
              EngineVersion: 8.0.31
              AvailabilityZone: us-east-2c
              StorageType: gp2
              AllocatedStorage: 10
              DBName: devdb
              MasterUsername: root
              MasterUserPassword: Password1234
              # MonitoringRoleArn: { get_attribute: [my_monitoring_iam_role, aws_resource_arn] }
              # DomainIAMRoleName: { get_attribute: [my_domain_iam_role, aws_resource_arn] }
    relationships:
    - type: cloudify.relationships.aws.rds.instance.connected_to
      target: rds_subnet_group
    - type: cloudify.relationships.aws.rds.instance.connected_to
      target: rds_option_group
    - type: cloudify.relationships.aws.rds.instance.connected_to
      target: rds_parameter_group
    - type: cloudify.relationships.aws.rds.instance.connected_to
      target: rds_security_group
    # - type: cloudify.relationships.aws.rds.instance.connected_to
    #   target: my_monitoring_iam_role
    # - type: cloudify.relationships.aws.rds.instance.connected_to
    #   target: my_domain_iam_role

  rds_parameter_group:
    type: cloudify.nodes.aws.rds.ParameterGroup
    properties:
      resource_id: { concat: [ dev-rds-param-group, { get_input: env_name } ] }
      resource_config:
        kwargs:
          DBParameterGroupFamily: mysql8.0
          Description: MySQL8.0 Parameter Group for Dev
      client_config: *client_config
    interfaces:
      cloudify.interfaces.lifecycle:
        # This lifecycle runs a post-create modify operation and
        # any resource_config inputs are passed as-is. This is
        # useful for doing bulk parameter updates (up to 20).
        configure:
          inputs:
            resource_config:
              Parameters:
              - ParameterName: time_zone
                ParameterValue: US/Eastern
                ApplyMethod: immediate
              - ParameterName: lc_time_names
                ParameterValue: en_US
                ApplyMethod: immediate

  rds_option_group:
    type: cloudify.nodes.aws.rds.OptionGroup
    properties:
      resource_id: { concat: [ dev-rds-option-group, { get_input: env_name } ] }
      resource_config:
        kwargs:
          EngineName: mysql
          MajorEngineVersion: '8.0'
          OptionGroupDescription: MySQL8.0 Option Group for Dev
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.aws.rds.option_group.connected_to
        target: rds_option_1

  rds_option_1:
    type: cloudify.nodes.aws.rds.Option
    properties:
      resource_id: MEMCACHED
      resource_config:
        kwargs:
          Port: 21212
    relationships:
      - type: cloudify.relationships.aws.rds.option.connected_to
        target: rds_security_group
              
  rds_subnet_group:
    type: cloudify.nodes.aws.rds.SubnetGroup
    properties:
      resource_id: { concat: [ dev-rds-subnet-group, { get_input: env_name } ] }
      resource_config:
        kwargs:
          DBSubnetGroupDescription: MySQL8.0 Subnet Group for Dev
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.aws.rds.subnet_group.connected_to
      target: rds_subnet_1
    - type: cloudify.relationships.aws.rds.subnet_group.connected_to
      target: rds_subnet_2
  
  rds_subnet_1:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *client_config
      resource_config:
        AvailabilityZone: { concat: [ { get_input: aws_region_name }, 'b' ] }
        CidrBlock: 10.10.5.0/24
    relationships:
      - type: cloudify.relationships.depends_on
        target: rds_vpc

  rds_subnet_2:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *client_config
      resource_config:
        AvailabilityZone: { concat: [ { get_input: aws_region_name }, 'c' ] }
        CidrBlock: 10.10.4.0/24
    relationships:
      - type: cloudify.relationships.depends_on
        target: rds_vpc
  
  rds_security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      client_config: *client_config
      resource_config:
        Description: 'RDS TEST GROUP'
        GroupName: { concat: [ 'RDSTESTGROUP', { get_input: env_name } ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: rds_vpc

  rds_vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      client_config: *client_config
      resource_config:
        CidrBlock: 10.10.0.0/16
