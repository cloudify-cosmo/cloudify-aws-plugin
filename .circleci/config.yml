version: 2.1

orbs:
  node: cloudify/public-unittest-orb@1.0.0 #orb version

checkout:
  post:
    - >
      if [ -n "$CI_PULL_REQUEST" ]; then
        PR_ID=${CI_PULL_REQUEST##*/}
        git fetch origin +refs/pull/$PR_ID/merge:
        git checkout -qf FETCH_HEAD
      fi

executors:

  py27:
    docker:
      - image: circleci/python:2.7

  py36:
    docker:
      - image: circleci/python:3.6

  wagon_generator:
    machine:
      image: ubuntu-1604:201903-01

  arm_wagon_generator:
    machine:
      image: ubuntu-2004:202101-01
      resource_class: arm.medium

  cloudify-machine-py3:
    machine:
      image: ubuntu-1604:201903-01

commands:
  generate_arch64_wagon:
    steps:
      - run:
          name: Create Workspace Build directory.
          command: mkdir -p workspace/build
      - run:
          name: Build py36 Wagon
          command: |
              git clone https://github.com/cloudify-cosmo/cloudify-wagon-build-containers.git
              docker build -t centos_aarch64 cloudify-wagon-build-containers/aarch_64/centos_7_py3
              docker run -v ~/project/:/packaging centos_aarch64
      - run:
          name: copy wagon to workspace
          command: cp *.wgn workspace/build/
      - persist_to_workspace:
          root: workspace
          paths:
            - build/*

  generate_py36_wagon:
    steps:
      - run:
          name: Create Workspace Build directory.
          command: mkdir -p workspace/build
      - run:
          name: Build py36 Wagon
          command: |
              git clone https://github.com/cloudify-cosmo/cloudify-wagon-build-containers.git
              docker build -t cloudify-wagon-builder-centos cloudify-wagon-build-containers/centos_7_py3
              docker run -v ~/project/:/packaging cloudify-wagon-builder-centos
      - run:
          name: copy wagon to workspace
          command: cp *.wgn workspace/build/
      - persist_to_workspace:
          root: workspace
          paths:
            - build/*

  generate_rhel_py36_wagon:
    steps:
      - run:
          name: Create Workspace Build directory.
          command: mkdir -p workspace/build
      - run:
          name: Build RHEL py36 Wagon
          command: |
              git clone https://github.com/cloudify-cosmo/cloudify-wagon-build-containers.git
              docker build -t cloudify-wagon-builder-redhat cloudify-wagon-build-containers/redhat_7_py3 --build-arg USERNAME="$USERNAME" --build-arg PASSWORD="$PASSWORD"
              docker run -v ~/project/:/packaging cloudify-wagon-builder-redhat
      - run:
          name: copy wagon to workspace
          command: cp *.wgn workspace/build/
      - persist_to_workspace:
          root: workspace
          paths:
            - build/*

  build_archive:
    steps:
      - attach_workspace:
          at: workspace
      - run:
          name: Create Workspace Build directory.
          command: mkdir -p workspace/build
      - run:
          name: Build Bundle
          command: |
              git clone https://github.com/cloudify-incubator/cloudify-ecosystem-test.git
              pip install -e cloudify-ecosystem-test
              python -c 'from ecosystem_cicd_tools import packaging; packaging.build_plugins_bundle_with_workspace()'
      - persist_to_workspace:
          root: workspace
          paths:
            - build/*

  create_manager_container_py3:
    steps:
      - run:
          name: "Pull Submodules"
          command: |
            git submodule update --init --recursive --remote
      - attach_workspace:
          at: workspace
      - run:
          name: update pip
          command: pip install -U pip===20.3.3
      - run:
          name: install cloudify
          command: |
            pip install -r test-requirements.txt
      - run:
          name: download manager docker image
          command:  wget http://repository.cloudifysource.org/cloudify/6.2.0/ga-release/cloudify-manager-aio-docker-6.2.0-ga.tar
      - run:
          name: load docker manager image
          command: docker load -i cloudify-manager-aio-docker-6.2.0-ga.tar
      - run:
          name: show images
          command: docker images
      - run:
          name: start docker container
          command: docker run --name cfy_manager -d --restart unless-stopped -v /sys/fs/cgroup:/sys/fs/cgroup:ro --tmpfs /run --tmpfs /run/lock --security-opt seccomp:unconfined --cap-add SYS_ADMIN --network host cloudify-manager-aio-x86_64
      - run:
          name: wait for starter
          command: docker exec -it cfy_manager cfy_manager wait-for-starter
      - run:
          name: install local project
          command:  pip install https://github.com/cloudify-incubator/cloudify-ecosystem-test/archive/latest.zip

  prepare_test_manager:
    steps:
      - run: ecosystem-test prepare-test-manager -l $TEST_LICENSE -es aws_access_key_id=$aws_access_key_id -es aws_secret_access_key=$aws_secret_access_key --bundle-path workspace/build/cloudify-plugins-bundle.tgz --yum-package python-netaddr --yum-package git

  run_hello_world_test:
    steps:
      - run: ecosystem-test local-blueprint-test  -b examples/blueprint-examples/hello-world-example/aws.yaml --test-id=hello-world-example -i aws_region_name=us-east-1 --on-failure=uninstall-force --timeout=1800

  run_cf_test:
    steps:
      - run: ecosystem-test local-blueprint-test  -b examples/blueprint-examples/virtual-machine/aws-cloudformation.yaml --test-id=virtual-machine -i aws_region_name=us-east-1 -i resource_suffix=$CIRCLE_BUILD_NUM --on-failure=uninstall-force --timeout=3000

  run_eks_test:
    steps:
      - run: ecosystem-test local-blueprint-test  -b examples/blueprint-examples/kubernetes/aws-eks/blueprint.yaml --test-id=aws-eks -i aws_region_name=us-east-1 -i eks_cluster_name=test-$CIRCLE_BUILD_NUM --on-failure=uninstall-force --timeout=3000

  run_ec2_image_test:
      steps:
        - run: ecosystem-test local-blueprint-test  -b examples/ec2-image-feature-demo/blueprint.yaml --test-id=ec2_image -i aws_region_name=eu-west-1 --on-failure=uninstall-force --timeout=3000

  run_autoscaling_test:
        steps:
          - run: ecosystem-test local-blueprint-test  -b examples/autoscaling-feature-demo/blueprint.yaml --test-id=autoscaling --on-failure=uninstall-force --timeout=3000

  run_cloudformation_test:
    steps:
      - run: ecosystem-test local-blueprint-test  -b examples/cloudformation-feature-demo/blueprint.yaml --test-id=cloudformation -i aws_region_name=eu-west-1 --on-failure=uninstall-force --timeout=3000
  run_dynamodb_test:
    steps:
      - run: ecosystem-test local-blueprint-test  -b examples/dynamodb-feature-demo/blueprint.yaml --test-id=dynamodb -i aws_region_name=eu-west-1 --on-failure=uninstall-force --timeout=3000

  run_ebs_test:
    steps:
      - run: ecosystem-test local-blueprint-test  -b examples/ebs-feature-demo/blueprint.yaml --test-id=ebs -i aws_region_name=eu-west-1 --on-failure=uninstall-force --timeout=3000

  run_ec2_instance_test:
      steps:
        - run: ecosystem-test local-blueprint-test  -b examples/ec2-instance-feature-demo/blueprint.yaml --test-id=ec2_instace -i aws_region_name=eu-west-1 -i availability_zone=eu-west-1a --on-failure=uninstall-force --timeout=3000

  run_ec2_keys_test:
    steps:
      - run: ecosystem-test local-blueprint-test  -b examples/ec2-keys-feature-demo/blueprint.yaml --test-id=ec2_keys -i aws_region_name=eu-west-1 --on-failure=uninstall-force --timeout=3000

  run_ec2_transit_gateway_test:
    steps:
      - run: ecosystem-test local-blueprint-test  -b examples/ec2-transit-gateway-feature-demo/blueprint.yaml --test-id=ec2_transit_gateway -i aws_region_name_a=eu-west-1 -i aws_region_name_b=eu-west-1 --on-failure=uninstall-force --timeout=3000

  run_ec2_vpc_test:
    steps:
      - run: ecosystem-test local-blueprint-test  -b examples/ec2-vpc-feature-demo/blueprint.yaml --test-id=ec2_vpc -i aws_region_name=eu-west-1 --on-failure=uninstall-force --timeout=3000

  run_natgateway_test:
    steps:
      - run: ecosystem-test local-blueprint-test  -b examples/natgateway-feature-demo/blueprint.yaml --test-id=natgateway -i aws_region_name=eu-west-1 --on-failure=uninstall-force --timeout=3000

  run_s3_test:
    steps:
      - run: ecosystem-test local-blueprint-test  -b examples/s3-feature-demo/blueprint.yaml --test-id=s3 -i aws_region_name=eu-west-1 --on-failure=uninstall-force --timeout=3000

  run_sns_test:
    steps:
      - run: ecosystem-test local-blueprint-test  -b examples/sns-feature-demo/blueprint.yaml --test-id=sns -i aws_region_name=eu-west-1 --on-failure=uninstall-force --timeout=3000

  run_sqs_test:
    steps:
      - run: ecosystem-test local-blueprint-test  -b examples/sqs-feature-demo/blueprint.yaml --test-id=sqs -i aws_region_name=eu-west-1 --on-failure=uninstall-force --timeout=3000

  run_kms_test:
    steps:
      - run: ecosystem-test local-blueprint-test  -b examples/kms-feature-demo/blueprint.yaml --test-id=kms -i aws_region_name=eu-west-1 -i iam_arn=arn:aws:iam::919239153674:user/plugins_test_user --on-failure=uninstall-force --timeout=3000

  release_plugin:
    steps:
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote --recursive
      - run:
          name: Set Python
          command: |
            if ! pyenv -v COMMAND &> /dev/null
            then
                echo "pyenv could not be found"
                exit
            else
                pyenv global 3.6.5
            fi
      - run:
          name: Download pip
          command: curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"
      - run:
          name: Install pip
          command: sudo python get-pip.py
      - run:
          name: update pip
          command: pip install -U pip===20.3.3
      - run:
          name: Install virtualenv
          command: pip install --user virtualenv
      - run:
          name: Init virtualenv
          command: virtualenv env
      - run:
          name: install tox
          command: pip install --user pygithub pyyaml==3.10
      - run:
          name: upgrade setuptools
          command: pip install --upgrade setuptools
      - run:
          name: install local project
          command: pip install https://github.com/cloudify-incubator/cloudify-ecosystem-test/archive/latest.zip
      - attach_workspace:
          at: workspace
      - run: ecosystem-test package-release --name cloudify-aws-plugin

  merge_docs:
    steps:
      - attach_workspace:
          at: workspace
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote --recursive
      - run:
          name: Set Python
          command: |
            if ! pyenv -v COMMAND &> /dev/null
            then
                echo "pyenv could not be found"
                exit
            else
                pyenv global 3.6.5
            fi
      - run:
          name: Download pip
          command: curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"
      - run:
          name: Install pip
          command: sudo python get-pip.py
      - run:
          name: Install virtualenv
          command: pip install --user virtualenv
      - run:
          name: Init virtualenv
          command: virtualenv env
      - run:
          name: install tox
          command: pip install --user pygithub pyyaml==3.10
      - run:
          name: upgrade setuptools
          command: pip install --upgrade setuptools
      - run:
          name: install local project
          command: pip install https://github.com/cloudify-incubator/cloudify-ecosystem-test/archive/latest.zip
      - attach_workspace:
          at: workspace
      - run: ecosystem-test merge-docs

jobs:

  unittests_py27:
    executor: py27
    steps:
      - run_unittest

  wagon:
    executor: wagon_generator
    steps:
      - checkout
      - generate_py36_wagon

  arch64_wagon:
    executor: arm_wagon_generator
    steps:
      - checkout
      - generate_arch64_wagon

  rhel_wagon:
    executor: wagon_generator
    steps:
      - checkout
      - generate_rhel_py36_wagon

  build_bundle:
    executor: py36
    steps:
      - checkout
      - build_archive

  cf_integration_tests_py3:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - create_manager_container_py3
      - prepare_test_manager
      - run_cf_test

  eks_integration_tests_py3:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - create_manager_container_py3
      - prepare_test_manager
      - run_eks_test

  ec2_image_integration_tests_py3:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - create_manager_container_py3
      - prepare_test_manager
      - run_ec2_image_test

  ec2_instance_integration_tests_py3:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - create_manager_container_py3
      - prepare_test_manager
      - run_ec2_instance_test

  ec2_keys_integration_tests_py3:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - create_manager_container_py3
      - prepare_test_manager
      - run_ec2_keys_test

  ec2_transit_gateway_integration_tests_py3:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - create_manager_container_py3
      - prepare_test_manager
      - run_ec2_transit_gateway_test

  ec2_vpc_integration_tests_py3:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - create_manager_container_py3
      - prepare_test_manager
      - run_ec2_vpc_test

  autoscaleing_integration_tests_py3:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - create_manager_container_py3
      - prepare_test_manager
      - run_autoscaling_test

  cloudformation_integration_tests_py3:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - create_manager_container_py3
      - prepare_test_manager
      - run_cloudformation_test

  dynamodb_integration_tests_py3:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - create_manager_container_py3
      - prepare_test_manager
      - run_dynamodb_test

  ebs_integration_tests_py3:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - create_manager_container_py3
      - prepare_test_manager
      - run_ebs_test

  natgateway_integration_tests_py3:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - create_manager_container_py3
      - prepare_test_manager
      - run_natgateway_test

  s3_integration_tests_py3:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - create_manager_container_py3
      - prepare_test_manager
      - run_s3_test

  sns_integration_tests_py3:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - create_manager_container_py3
      - prepare_test_manager
      - run_sns_test

  sqs_integration_tests_py3:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - create_manager_container_py3
      - prepare_test_manager
      - run_sqs_test

  kms_integration_tests_py3:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - create_manager_container_py3
      - prepare_test_manager
      - run_kms_test

  hw_integration_tests_py3:
    executor: cloudify-machine-py3
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
    steps:
      - checkout
      - create_manager_container_py3
      - prepare_test_manager
      - run_hello_world_test

  release:
    executor: py36
    steps:
      - checkout
      - release_plugin

  merge_docs:
    executor: py36
    steps:
      - checkout
      - merge_docs


workflows:
  version: 2
  tests:
    jobs:
      - node/check_py3_compat_job
      - node/unittests_job
      - node/validate_version_job
      - node/validate_documentation_job
      - rhel_wagon:
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - wagon:
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - arch64_wagon:
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - build_bundle:
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
          requires:
            - wagon
            - rhel_wagon
            - arch64_wagon
      - cf_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - eks_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - hw_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - release:
          filters:
            branches:
              only: /master/
          requires:
            - node/unittests_job
            - rhel_wagon
            - wagon
            - arch64_wagon
            - node/validate_version_job
            - node/validate_documentation_job
            - cf_integration_tests_py3
            - eks_integration_tests_py3
            - hw_integration_tests_py3
      - merge_docs:
          filters:
            branches:
              only: /master/
          requires:
            - release
            - node/validate_documentation_job

  sunday_wednesday:
    triggers:
    - schedule:
        cron: "0 3 * * 0,3"
        filters:
          branches:
            only:
              - master
    jobs:
      - node/check_py3_compat_job
      - node/unittests_job
      - node/validate_version_job
      - rhel_wagon:
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - wagon:
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - arch64_wagon:
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - build_bundle:
          filters:
            branches:
              only: /master/
          requires:
            - wagon
            - rhel_wagon
            - arch64_wagon
      - cf_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - ebs_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - ec2_instance_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - ec2_vpc_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - sns_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/


  monday_thursday:
    triggers:
    - schedule:
        cron: "0 3 * * 1,4"
        filters:
          branches:
            only:
              - master
    jobs:
      - node/check_py3_compat_job
      - node/unittests_job
      - node/validate_version_job
      - rhel_wagon:
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - wagon:
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - arch64_wagon:
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - build_bundle:
          filters:
            branches:
              only: /master/
          requires:
            - wagon
            - rhel_wagon
            - arch64_wagon
      - eks_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - ec2_image_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - autoscaleing_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - ec2_transit_gateway_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - s3_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - kms_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/


  tuesday_friday_saturday:
    triggers:
    - schedule:
        cron: "0 3 * * 2,5,6"
        filters:
          branches:
            only:
              - master
    jobs:
      - node/check_py3_compat_job
      - node/unittests_job
      - node/validate_version_job
      - rhel_wagon:
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - wagon:
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - arch64_wagon:
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - build_bundle:
          filters:
            branches:
              only: /master/
          requires:
            - wagon
            - rhel_wagon
            - arch64_wagon
      - hw_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - cloudformation_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - dynamodb_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - ec2_keys_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - natgateway_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - sqs_integration_tests_py3:
          requires:
            - build_bundle
            - wagon
            - rhel_wagon
            - arch64_wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
