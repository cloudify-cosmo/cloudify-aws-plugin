version: 2.1

checkout:
  post:
    - >
      if [ -n "$CI_PULL_REQUEST" ]; then
        PR_ID=${CI_PULL_REQUEST##*/}
        git fetch origin +refs/pull/$PR_ID/merge:
        git checkout -qf FETCH_HEAD
      fi


executors:
  py27:
    docker:
      - image: circleci/python:2.7

  py36:
    docker:
      - image: circleci/python:3.6

  centos7_py27:
    docker:
      - image: cloudifyplatform/cloudify-centos-7-wagon-builder

  cloudify-machine:
    machine:
      image: ubuntu-1604:201903-01


commands:
  run_unittest:
    steps:
      - checkout
      - run:
          name: install tox
          command: pip install --user tox
      - run:
          name: Run Flake8
          command: /home/circleci/.local/bin/tox -e pep8
      - run:
         name: Run nosetest
         command: /home/circleci/.local/bin/tox -e nosetest

  check_py3_compat:
    steps:
      - run:
          name: install futurize
          command: pip install future --user
      - run:
          name: find python3-incompatible code
          command: |
            FUTURIZE="futurize ."
            while read line; do
              [[ "$line" =~ ^#.* ]] && continue
              FUTURIZE="${FUTURIZE} ${line}"
            done<.circleci/py3fixers
            echo "Running: $FUTURIZE"
            $FUTURIZE>futurize_diffs
      - run:
          name: check that there is no python3-incompatible code
          command: |
            if [[ -s futurize_diffs ]]; then
              echo "Python-3-incompatible code found"
              cat futurize_diffs
              exit 1
            fi

  generate_wagon:
    steps:
      - persist_to_workspace:
          root: workspace
          paths:
            - build/*

  run_integration_tests:
    steps:
      - run:
          name: "Pull Submodules"
          command: |
            git submodule update --init --recursive
      - attach_workspace:
          at: workspace
      - run:
          name: update pip
          command: pip install -U pip
      - run:
          name: install cloudify
          command: pip install -U cloudify==5.0.0 pytest==4.6.3 pyyaml==3.10
      - run:
          name: download manager docker image
          command: wget http://repository.cloudifysource.org/cloudify/5.0.0/ga-release/cloudify-docker-manager-5.0.0.tar
      - run:
          name: load docker image
          command: docker load -i cloudify-docker-manager-5.0.0.tar
      - run:
          name: retain space by dumping the tar
          command: rm cloudify-docker-manager-5.0.0.tar
      - run:
          name: show images
          command: docker images
      - run:
          name: start docker container
          command: docker run --name cfy_manager -d --restart unless-stopped -v /sys/fs/cgroup:/sys/fs/cgroup:ro --tmpfs /run --tmpfs /run/lock --security-opt seccomp:unconfined --cap-add SYS_ADMIN --network host cloudifyplatform/premium-cloudify-manager-aio
      - run:
          name: install local project
          command: pip install https://github.com/cloudify-incubator/cloudify-ecosystem-test/archive/latest.zip
      - run: pytest -s .circleci/test_examples.py

  release_plugin:
    steps:
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote --recursive
      - run:
          name: Download pip
          command: curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"
      - run:
          name: Install pip
          command: sudo python get-pip.py
      - run:
          name: Install virtualenv
          command: pip install --user virtualenv
      - run:
          name: Init virtualenv
          command: virtualenv env
      - run:
          name: install tox
          command: pip install --user pygithub pyyaml==3.10
      - run:
          name: upgrade setuptools
          command: pip install --upgrade setuptools
      - run:
          name: install local project
          command: pip install https://github.com/cloudify-incubator/cloudify-ecosystem-test/archive/latest.zip
      - attach_workspace:
          at: workspace
      - run: python .circleci/package_release.py

jobs:

  unittests_py27:
    executor: py27
    steps:
      - run_unittest

  unittests_py36:
    executor: py36
    steps:
      - run_unittest

  py3_compat:
    executor: py27
    steps:
      - checkout
      - check_py3_compat

  wagon:
    executor: centos7_py27
    steps:
      - checkout
      - generate_wagon

  integration_tests:
    executor: cloudify-machine
    environment:
      CLOUDIFY_SSL_TRUST_ALL: true
      IAAS: aws
    steps:
      - checkout
      - run_integration_tests

  release:
    executor: py27
    steps:
      - checkout
      - release_plugin

workflows:
  version: 2
  tests:
    jobs: &all_jobs
      - py3_compat
      - unittests_py27
      - unittests_py36
      - wagon:
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - integration_tests:
          requires:
            - wagon
          filters:
            branches:
              only: /([0-9\.]*\-build|master|dev)/
      - release:
          filters:
            branches:
              only: /master/
          requires:
            - wagon
            - integration_tests
  nightly:
    triggers:
    - schedule:
        cron: "0 1 * * *"
        filters:
          branches:
            only:
              - master
    jobs: *all_jobs
