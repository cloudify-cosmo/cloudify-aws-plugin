tosca_definitions_version: cloudify_dsl_1_3

description: >
  Do things with S3, cause happiness.

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - plugin.yaml

inputs:
  docker_image_name:
    description: >
      Name of image which will be retrieved from docker hub.
    default: ubuntu

  aws_access_key_id:
    description: >
      The access key ID used to access the AWS API
  aws_secret_access_key:
    description: >
      The secret key used to access the AWS API

  image:
    description: >
      Image to be used when launching agent VM's.
      Recommended images for ECS: http://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_container_instance.html
    default: ami-a88a46c5

  size:
    description: >
      Flavor of the agent VM's
    default: m3.medium

  name_prefix:
    description: >
      What to prefix the names of entities with.
    default: ecs-poc

node_templates:

  elb:
    type: cloudify.aws.nodes.ElasticLoadBalancer
    properties:
      elb_name: { concat: [ {get_input: name_prefix }, -elb ] }
      zones: ['us-east-1c']
      listeners:
        - [80, 80, 'http']
      health_checks:
        - target: TCP:80
          timeout: 60
          unhealthy_threshold: 10
          healthy_threshold: 2
          interval: 120
      aws_config:
        aws_access_key_id: { get_input: aws_access_key_id }
        aws_secret_access_key: { get_input: aws_secret_access_key }
        region: us-east-1

  cluster1:
    type: cloudify.aws.nodes.ECSCluster
    properties:
      name: { concat: [ {get_input: name_prefix }, -cluster ] }
      aws_config:
        aws_access_key_id: { get_input: aws_access_key_id }
        aws_secret_access_key: { get_input: aws_secret_access_key }

  clusterinstances:
    type: cloudify.aws.nodes.Instance
    instances:
      deploy: 2
    properties:
      image_id: { get_input: image }
      instance_type: { get_input: size }
      install_agent: false
      parameters:
        user_data: { concat: [ "#!/bin/bash \n echo ECS_CLUSTER=", {get_input: name_prefix }, "-cluster >> /etc/ecs/ecs.config" ] }
        # Needs role as described in http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
        instance_profile_name: ecsInstanceRole
        # Needs to be in a region served by the LB
        placement: 'us-east-1c'
      aws_config:
        aws_access_key_id: { get_input: aws_access_key_id }
        aws_secret_access_key: { get_input: aws_secret_access_key }
    relationships:
      - type: cloudify.aws.relationships.ecs_instances_in_cluster
        target: cluster1
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: sg

  sg:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      description: { concat: [ {get_input: name_prefix }, -ecs ] }
      rules:
        - cidr_ip: 0.0.0.0/0
          ip_protocol: tcp
          from_port: 80
          to_port: 80
        - cidr_ip: 51.9.249.184/32
          ip_protocol: tcp
          from_port: 22
          to_port: 22
      aws_config:
        aws_access_key_id: { get_input: aws_access_key_id }
        aws_secret_access_key: { get_input: aws_secret_access_key }

  service1:
    type: cloudify.aws.nodes.ECSService
    properties:
      name: { concat: [ {get_input: name_prefix }, -service ] }
      desired_count: 1
      container_listening_port: 80
      lb_management_role: ecsServiceRole
      aws_config:
        aws_access_key_id: { get_input: aws_access_key_id }
        aws_secret_access_key: { get_input: aws_secret_access_key }
    relationships:
      - type: cloudify.aws.relationships.ecs_service_running_on_cluster
        target: cluster1
      - type: cloudify.aws.relationships.ecs_service_runs_task
        target: task1
      - type: cloudify.aws.relationships.ecs_service_behind_load_balancer
        target: elb
      # If this isn't there then a much longer retry period is needed because
      # the service gets created while the cluster instances are being created
      # and has to wait too long for them to be both deployed and registered
      # with the cluster, causing deployment failure.
      - type: cloudify.relationships.depends_on
        target: clusterinstances

  con1:
    type: cloudify.aws.nodes.ECSContainer
    properties:
      name: 'webapp'
      memory: 256
      command:
        - bash
        - -c
        - 'apt-get update && apt-get install -y nginx && /usr/sbin/nginx && sleep 86400'
      image: { get_input: docker_image_name }
      tcp_port_mappings: {80: 80}

  vol1:
    type: cloudify.aws.nodes.ECSVolume
    properties:
      name: 'vol1'

  task1:
    type: cloudify.aws.nodes.ECSTask
    properties:
      name: { concat: [ {get_input: name_prefix }, -task ] }
      aws_config:
        aws_access_key_id: { get_input: aws_access_key_id }
        aws_secret_access_key: { get_input: aws_secret_access_key }
    relationships:
      - type: cloudify.aws.relationships.ecs_container_for_task
        target: con1
      - type: cloudify.aws.relationships.ecs_volume_for_task
        target: vol1

outputs:
  endpoint:
    description: The DNS name of your load balancer..
    value: { get_attribute: [ elb, dns_name ] }
